/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 src/assets/3d-models/HexTile.glb -t -r ./src/assets 
*/

import { useRef } from "react";
import * as THREE from "three";
import { useGLTF, Text, Outlines, Edges } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { TILE_COLORS } from ".";

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh;
  };
};

interface HexTileModelProps {
  isOffset: boolean;
  /* Offset coords - Column */
  col: number;
  /* Offset coords - Row */
  row: number;
  isHoveredTile?: boolean;
  isPlayerTile?: boolean;
  isDestinationTile?: boolean;
  hideTile?: boolean;
  showSphere?: boolean;
}

export function HexTileModel({
  position,
  col,
  row,
  isOffset,
  hideTile = false,
  showSphere = false,
  isHoveredTile,
  isPlayerTile,
  isDestinationTile,
  ...props
}: JSX.IntrinsicElements["mesh"] & HexTileModelProps) {
  // eslint-disable-next-line
  // @ts-ignore
  const { nodes } = useGLTF("/3d-models/HexTile.glb") as GLTFResult;

  // Size is calculated as the diameter of the outer circle
  // that can be drawn around the hex
  // See https://www.redblobgames.com/grids/hexagons/#basics
  const hardcodedTileSize = 0.5553572773933411;

  const size = nodes.Cylinder.geometry.boundingBox
    ? nodes.Cylinder.geometry.boundingBox.max.z
    : hardcodedTileSize;

  // NOTE: bounding sphere appears to be larger than the mesh?
  // Not having much luck googling why that would be
  // console.log(nodes.Cylinder.geometry.boundingSphere);
  // isSphere: true
  // center: {x: 0, y: 0, z: 0}
  // radius: 0.7348821301486452

  // console.log(nodes.Cylinder.geometry.boundingBox.max);
  // const boundingBox = {
  //   x: 0.48095351457595825,
  //   y: 0.017713172361254692,
  //   z: 0.5553572773933411,
  // };

  const tileMeshRef = useRef(null);

  // import { useHelper } from "@react-three/drei";
  // eslint-disable-next-line
  // @ts-ignore
  // useHelper(tileMeshRef, THREE.BoxHelper, "cyan");

  // Make text flat with tiles
  const textRotate = new THREE.Euler(-(Math.PI / 2), 0, 0);

  const pickTileColor = () => {
    // Should maybe make custom mesh hex outline for this?
    if (isHoveredTile) {
      return TILE_COLORS.HOVERED;
    }

    if (isOffset) {
      return TILE_COLORS.OFFSET_ROW;
    }

    return TILE_COLORS.ROW;
  };

  return (
    <group position={position}>
      <Text
        letterSpacing={0.17}
        fontSize={0.22}
        rotation={textRotate}
        position={[0, 0.02, 0]}
      >
        [{col}, {row}]
      </Text>
      {!hideTile && showSphere && (
        <mesh>
          <sphereGeometry args={[size, 24, 24]} />
          <meshStandardMaterial transparent wireframe />
        </mesh>
      )}
      {!hideTile && (
        <mesh
          {...props}
          ref={tileMeshRef}
          dispose={null}
          geometry={nodes.Cylinder.geometry}
          material={nodes.Cylinder.material}
        >
          <meshStandardMaterial
            attach="material"
            color={pickTileColor()}
            roughness={0.4}
            transparent
            // opacity={0.5}
          />
          {isPlayerTile && (
            <>
              <Outlines
                scale={[0.8, 0.01, 0.8]}
                color={TILE_COLORS.PLAYER}
                position={[0, 0.04, 0]}
              />
              <Text
                color="black"
                letterSpacing={0.17}
                fontSize={0.22}
                rotation={textRotate}
                position={[0, 0.04, 0]}
              >
                [{col}, {row}]
              </Text>
            </>
          )}
          {isDestinationTile && (
            <>
              <Outlines
                scale={[0.8, 0.01, 0.8]}
                color={TILE_COLORS.DESTINATION}
                position={[0, 0.04, 0]}
              ></Outlines>
              <Text
                color="black"
                letterSpacing={0.17}
                fontSize={0.22}
                rotation={textRotate}
                position={[0, 0.04, 0]}
              >
                [{col}, {row}]
              </Text>
            </>
          )}
          {isHoveredTile && <Edges scale={1.1} color={TILE_COLORS.HOVERED} />}
        </mesh>
      )}
    </group>
  );
}

useGLTF.preload("/3d-models/HexTile.glb");
